#!/bin/bash

echo "Uncrustify precommit hook: checking new files with uncrustify..."

parent_branch="$1"
current_branch="$2"

# If you want to allow non-ascii filenames set this variable to true.
allownonascii=$(git config hooks.allownonascii)

if [ "$parent_branch" == "" ]
then
	if git rev-parse --verify HEAD >/dev/null 2>&1
	then
		against=HEAD
	else
		# Initial commit: diff against an empty tree object
		against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
	fi
	gitArguments="diff-index --cached --name-only $against --"
else
	gitArguments="diff --name-only $parent_branch $current_branch"
fi


# git pre-commit hook that runs an Uncrustify stylecheck.
# Features:
#  - abort commit when commit does not comply with the style guidelines
#  - create a patch of the proposed style changes
#
# More info on Uncrustify: http://uncrustify.sourceforge.net/

# This file is part of a set of unofficial pre-commit hooks available
# at github.
# Link:    https://github.com/githubbrowser/Pre-commit-hooks
# Contact: David Martin, david.martin.mailbox@googlemail.com


##################################################################
# SETTINGS
# set path to uncrustify binary
# UNCRUSTIFY="/usr/bin/uncrustify"
UNCRUSTIFY="C:/Program Files/LLVM/bin/clang-format.exe"

# the source language: C, CPP, D, CS, JAVA, PAWN, VALA, OC, OC+
# SOURCE_LANGUAGE="CPP"
SOURCE_LANGUAGE="CPP"

# remove any older patches from previous commits. Set to true or false.
# DELETE_OLD_PATCHES=false
DELETE_OLD_PATCHES=false

# only parse files with the extensions in FILE_EXTS. Set to true or false.
# if false every changed file in the commit will be parsed with Uncrustify.
# if true only files matching one of the extensions are parsed with Uncrustify.
# PARSE_EXTS=true
PARSE_EXTS=true

# file types to parse. Only effective when PARSE_EXTS is true.
# FILE_EXTS=".c .h .cpp .hpp"
FILE_EXTS=".c .h .cpp .hpp"

##################################################################
# There should be no need to change anything below this line.

#. "$(dirname -- "$0")/canonicalize_filename.sh"

# exit on error
#set -e

# check whether the given file matches any of the set extensions
matches_extension() {
    local filename="$(basename -- "$1")"
    local extension=".${filename##*.}"
    local ext

    for ext in $FILE_EXTS; do [ "$ext" = "$extension" ] && return 0; done

    return 1
}

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1 ; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

if [ ! -x "$UNCRUSTIFY" ] ; then
    printf "Error: uncrustify executable not found.\n"
    printf "Set the correct path in $(canonicalize_filename "$0").\n"
    exit 1
fi

# create a random filename to store our generated patch
prefix="pre-commit-uncrustify"
suffix="$(date +%s)"
patch="/tmp/$prefix-$suffix.patch"

# clean up any older uncrustify patches
$DELETE_OLD_PATCHES && rm -f /tmp/$prefix*.patch

# BA: Check only new added files with uncrustify

GIT_FILES="$(git $gitArguments)"

# create one patch containing all changes to the files
git $gitArguments | while read file;
do
    # ignore file if we do check for file extensions and the file
    # does not match any of the extensions specified in $FILE_EXTS
    if $PARSE_EXTS && ! matches_extension "$file"; then
        continue;
    fi

    # uncrustify our sourcefile, create a patch with diff and append it to our $patch
    # The sed call is necessary to transform the patch from
    #    --- $file timestamp
    #    +++ - timestamp
    # to both lines working on the same file and having a a/ and b/ prefix.
    # Else it can not be applied with 'git apply'.
    "$UNCRUSTIFY" --style=file "$file" | \
        diff -u -- "$file" - | \
        sed -e "1s|--- |--- a/|" -e "2s|+++ -|+++ b/$file|" >> "$patch"
done


# if no patch has been generated all is ok, clean up the file stub and exit
if [ ! -s "$patch" ] ; then
    printf "Files in this commit comply with the uncrustify rules.\n"
    rm -f "$patch"
    exit 0
else 
	# BA: Convert patch line endings to windows style ( CR > CRLF )
	#sed -i 's/$'"/`echo \\\r`/" "$patch"
	

	# a patch has been created, notify the user and exit
	printf "\nThe following differences were found between the code to commit "
	printf "and the uncrustify rules:\n\n"
	cat "$patch"

	if [ ! $(git apply $patch) ] ; then
		#printf "Files in this commit comply with the clang-format rules.\n"
		echo -e "Files in this commit comply with the clang-format rules.\n"		
		git add -u
		rm -f "$patch"
		exit 0
	fi
	
	
	echo -e "Aborting commit.\n"
	exit 1
fi
